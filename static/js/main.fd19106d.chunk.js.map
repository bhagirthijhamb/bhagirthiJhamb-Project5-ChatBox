{"version":3,"sources":["components/Welcome.js","components/EnterUserModal.js","firebase.js","components/Message.js","components/MessageList.js","components/ChatGroup.js","components/SendMessageForm.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","timeOfDay","hours","Date","getHours","Component","backdropStyle","position","top","bottom","left","right","backgroundColor","padding","modalStyle","borderRadius","maxWidth","minHeight","margin","footerStyle","EnterUserModal","sendUser","props","getLoginUser","state","user","onclose","e","onClose","handleChange","setState","target","value","handleSubmit","preventDefault","this","show","className","style","children","onSubmit","action","onChange","type","placeholder","onClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Message","currentUser","time","message","key","database","ref","currentGroup","child","messageKey","remove","MessageList","messages","map","index","ChatGroupModal","sendGroupName","getGroupName","group","groups","indexOf","push","ServerValue","TIMESTAMP","alert","handleSendGroupName","console","log","handleDeleteGroup","handleLiClick","selectedGroup","innerText","on","response","data","val","groupsArray","SendMessageForm","fullMessage","handleUserInput","handleDelete","App","showUserModal","userShow","showGroupModal","groupShow","userName","localStorage","setItem","groupName","loadMessages","copyMessage","date","createdAt","getMinutes","getSeconds","newMessage","getItem","ChatGroup","getMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fd19106d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Welcome extends Component {\n    render(){\n        const date = new Date();\n        const hours = date.getHours();\n        let timeOfDay\n\n        if (hours < 12) {\n            timeOfDay = \"morning\";\n        } else if (hours >= 12 && hours < 17) {\n            timeOfDay = \"afternoon\";\n        } else {\n            timeOfDay = \"night\";\n        }\n        return(\n            <header>\n                <h2>Good {timeOfDay} to you, sir or madam!</h2>\n                <p>Chat Box is a chat app that has groups and youcan chat with people in real time</p>\n            </header>            \n        )\n    }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\n\n// Grey background\nconst backdropStyle = {\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    padding: 50,\n}\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '30%',\n    left: 0,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    maxWidth: 250,\n    minHeight: 150,\n    margin: '0 auto',\n    padding: 10,\n    position: \"relative\"\n};\n\nconst footerStyle = {\n    position: \"absolute\",\n    bottom: 10\n}\n\n\nclass EnterUserModal extends Component {\n  constructor(){\n    super()\n    this.state = {\n      user: ''\n    }\n  }\n\n  sendUser = () => {\n    this.props.getLoginUser(this.state.user)\n  }\n\n  onclose = (e) => {\n    this.props.onClose && this.props.onClose(e);\n  }; \n\n\n  handleChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      user: e.target.value\n    })\n    \n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.sendUser();\n\n    // this.setState({\n    //   user: ''\n    // })\n  }\n\n  \n  render() {\n    // console.log(this.state.user);    \n\n    if (!this.props.show) {\n      return null;\n    }\n    return (\n      <div className=\"loginBox\" style={backdropStyle}>\n        <div style={modalStyle}>\n          <h2 className=\"modalHeader\">Enter username</h2>\n          {this.props.children}\n\n            <form onSubmit={this.handleSubmit} action=\"\">\n                <input className=\"input loginInput\" onChange={this.handleChange} value={this.state.user} type=\"text\" placeholder=\"Username\" />\n                <div style={footerStyle}>\n                  <button className=\"submit\">Submit</button>\n                  <button className=\"close\" onClick={(e) => { this.props.onClose(e); }}>Close</button>\n                </div>\n            </form>          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EnterUserModal;","// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDciUjGJwEk-pas3FAtthvcGXJT8QTwOhQ\",\r\n  authDomain: \"to-do-app-32054.firebaseapp.com\",\r\n  databaseURL: \"https://to-do-app-32054.firebaseio.com\",\r\n  projectId: \"to-do-app-32054\",\r\n  storageBucket: \"to-do-app-32054.appspot.com\",\r\n  messagingSenderId: \"552462434673\",\r\n  appId: \"1:552462434673:web:456137243376262d4576d0\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\n\nimport firebase from './../firebase';\n\nfunction Message(props) {  \n    let remove = messageKey => {\n        const dbRef = firebase.database().ref(`/${props.currentGroup}`);\n        dbRef.child(props.messageKey).remove();\n    }\n\n    let className = 'message'\n    if (props.currentUser === props.user) {\n        className = 'myMessage'\n    }\n\n    return (\n        <div className={className}>\n            <div className=\"message-top\">\n                <div className=\"message-time\">{props.time}</div>\n                <div className=\"message-username\">{props.user}</div>\n            </div>\n           \n            <div className=\"message-text\">{props.message}<span></span></div>\n            <button\n                className=\"delete\"\n                onClick={() => {\n                    remove(props.message.key);\n                }}\n            >\n                <i className=\"fas fa-times deleteIcon\"></i>\n            </button>\n        </div>\n    );    \n}\n\nexport default Message;","import React, { Component } from 'react';\nimport Message from './Message'\n\n// const DUMMY_DATA = [\n//     {\n//         senderId:'BJ',\n//         text:'Hey, how is it going?'\n//     },\n//     {\n//         senderId: 'Piyush',\n//         text: 'Great, how about you?'\n//     },\n//     {\n//         senderId: 'BJ',\n//         text: 'Good to hear, I am great as well'\n//     }\n// ]\n\nclass MessageList extends Component {\n    render(props) {\n        // console.log(this.props.currentGroup);\n        return (\n            <div className=\"message-list\">\n               {this.props.messages.map((message, index) => {\n                   return (\n                       <Message key={index} currentUser={this.props.currentUser} messageKey={message.key} message={message.message} time={message.time} user={message.user} currentGroup={this.props.currentGroup}/>\n                   )\n               })}\n            </div>\n        );\n    }\n}\n\nexport default MessageList;","import React, { Component } from 'react';\nimport firebase from 'firebase'\n\n// Grey background\nconst backdropStyle = {\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    padding: 50\n}\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '20%',\n    left: 0,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    maxWidth: 250,\n    minHeight: 150,\n    margin: '0 auto',\n    padding: 10,\n    position: \"relative\"\n};\n\nconst footerStyle = {\n    position: \"absolute\",\n    bottom: 10\n}\n\n\nclass ChatGroupModal extends Component {\n    constructor() {\n        super()\n        this.state = {\n            group: '',\n            groups: [],\n            selectedGroup:''\n        }\n    }\n\n    sendGroupName = () => {\n        this.props.getGroupName(this.state.group)\n    }\n\n    onclose = (e) => {\n        this.props.onClose && this.props.onClose(e);\n    };\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n\n        dbRef.on('value', (response) => {\n            const data = response.val();\n\n            const groupsArray = []\n            for (let key in data) {\n                groupsArray.push(key )\n            }\n\n            this.setState({\n                groups: groupsArray\n            })\n        })\n    }\n\n    handleChange = (e) => {\n        // console.log(e.target.value);\n        this.setState({\n            group: e.target.value\n        })\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(!this.props.user || this.props.user === '' || this.props.user === 'null'){\n            alert('Please choose username');\n        } else {\n             if (this.state.groups.indexOf(this.state.group) === -1) {\n            const dbRef = firebase.database().ref(`/${this.state.group}`);\n            dbRef.push({\n                message: 'Welcome to the group',\n                time: firebase.database.ServerValue.TIMESTAMP,\n                user: this.props.user\n            });\n        }\n        }\n                        \n       \n    }\n\n\n    // Checks if username is there before creating group\n    handleSendGroupName = () => {       \n        if(!this.props.user || this.props.user === '' || this.props.user === 'null'){\n            console.log('no user')\n        } else {\n            this.sendGroupName();\n        }\n    }\n\n    handleDeleteGroup = () => {\n        if(this.state.group !== this.props.currentGroup){\n            firebase.database().ref(`${this.state.group}`).remove();\n        } else {\n            alert('Cannot delete the current group');\n        }\n    }    \n\n    handleLiClick = (e) => {\n        // e.target.style.backgroundColor = 'red';\n        const selectedGroup = e.target.innerText\n        this.setState({\n           group: `${selectedGroup}`\n        }, () => {\n            // console.log(this.state.selectedGroup);\n        })\n    }\n    \n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n\n        return (\n            <div className=\"loginBox\" style={backdropStyle}>\n                <div style={modalStyle}>\n                    {this.props.children}\n\n                    <div className=\"group-list\">\n                        <ul className=\"groups\">\n                            {this.state.groups.map((group, index) => {\n                                return (                                    \n                                    <li className=\"group\" key=\"index\" onClick={e => this.handleLiClick(e)}>{group}</li>                                    \n                                )\n                            })}\n                        </ul>\n                    </div>\n\n                    <form onSubmit={this.handleSubmit} action=\"\">\n                        <input className=\"input\" onChange={this.handleChange} value={this.state.group} type=\"text\" placeholder=\"Group name\" /> \n                        <div style={footerStyle}>\n                            <button className=\"submit\" onClick={this.handleSendGroupName()}>Submit</button>                            \n                            <button className=\"close\" onClick={(e) => { this.props.onClose(e); }}>Close</button>\n                        </div>\n                    </form>\n\n                    <button className=\"close\" onClick={() => {\n                        this.handleDeleteGroup();\n                    }}>Delete</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default ChatGroupModal;","import React, { Component } from \"react\";\nimport firebase from 'firebase'\n\nclass SendMessageForm extends Component {\n  constructor(){\n    super();\n    this.state = {\n      message: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const fullMessage = {\n        message: this.state.message,\n        time: firebase.database.ServerValue.TIMESTAMP,\n        user: this.props.user\n      }\n\n    if (this.state.message !== '') {\n\n      const dbRef = firebase\n        .database()\n        .ref(`/${this.props.group}`);\n      dbRef.push(fullMessage);\n\n      this.setState({\n        message: ''\n      })\n    }\n  }\n\n  handleUserInput = (e) => {\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleDelete = (e) => {\n    e.preventDefault();\n  }\n  \n  render() {\n    // console.log(this.state.message);\n    // console.log(this.props.group);\n    return (\n        <form onSubmit={this.handleSubmit} className=\"send-message-form\" action=\"\">\n          <input onChange={this.handleChange} value={this.state.message} type=\"text\" placeholder=\"Type your message and hit ENTER\" />\n          <button onClick={this.handleSubmit} className=\"send-message\">\n            Send\n          </button>\n        </form>\n    );\n  }\n}\n\nexport default SendMessageForm;\n","import React, { Component } from 'react';\n\n// import components\nimport Welcome from './components/Welcome';\nimport EnterUserModal from './components/EnterUserModal';\nimport MessageList from './components/MessageList';\nimport ChatGroup from './components/ChatGroup';\nimport SendMessageForm from \"./components/SendMessageForm\";\n\n// import firebase\nimport firebase from './firebase';\n\n// CSS for the `App` component\nimport \"./App.scss\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userShow: false,\n      groupShow: false,\n      time: \"\",\n      user: `${localStorage.getItem(\"user\")}`,\n      message: \"\",\n      messages: [],\n      group: `${localStorage.getItem(\"group\")}`,\n      groups: []\n    };\n  }\n\n  showUserModal = () => {\n    this.setState({\n      // ...this.state,\n      userShow: !this.state.userShow,\n    });\n  };\n\n\n  showGroupModal = () => {\n    this.setState({\n      // ...this.state,\n      groupShow: !this.state.groupShow,\n    });\n  };\n\n  onclose = (e) => {\n    this.props.onClose && this.props.onClose(e);\n  };\n\n  getLoginUser = (userName) => { \n    this.setState({ \n      user: userName \n    }) \n    localStorage.setItem(\"user\", userName);\n  }  \n\n  getGroupName = (groupName) => {\n    localStorage.setItem(\"group\", groupName);\n    this.setState({\n      group: groupName\n    }, () => { this.loadMessages();})    \n  }\n\n  loadMessages = () => {\n\n    const dbRef2 = firebase.database().ref(`/${this.state.group}`);\n    // const dbRef = firebase.database().ref(this.state.group);\n\n    dbRef2.on('value', (response) => {\n      const data = response.val();\n\n      this.setState({ \n        messages: [] \n      }, () => {\n         \n          const copyMessage = [...this.state.messages];\n          for (let key in data) {\n            const { user, message, time } = data[key];\n            const date = new Date(time);\n            const createdAt = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n            const messageKey = key;\n\n            const newMessage = {\n              time: createdAt,\n              user: user,\n              message: message,\n              key: messageKey\n            }\n\n            copyMessage.push(newMessage);\n\n            this.setState({\n              time: createdAt,\n              user: user,\n              message: message,\n              messages: copyMessage\n            })\n            // console.log(this.state.messages);\n          }\n      }\n      )     \n    })\n  }\n\n  componentDidMount() {\n\n    this.loadMessages(); \n  }       \n  \n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Welcome />\n        <h1>Chat Box</h1>\n        <div className=\"mobile\">\n          <div className=\"top\"></div>\n          <div className=\"bottom\"></div>\n          <div className=\"topBar\"></div>\n\n          <div className=\"screen\">\n            <MessageList currentUser={this.state.user} messages={this.state.messages} currentGroup={this.state.group} />\n          </div>\n\n          <button onClick={this.showUserModal} className=\"create-user\">\n            Create User\n          </button>\n          <button className=\"current-group\">\n            {this.state.group}\n          </button>\n          <button onClick={this.showGroupModal} className=\"create-group\">\n            New Group\n          </button> \n\n          <EnterUserModal getLoginUser={this.getLoginUser} onClose={this.showUserModal} show={this.state.userShow}>\n          </EnterUserModal>  \n\n          <ChatGroup user={this.state.user} currentGroup={this.state.group} getGroupName={this.getGroupName} onClose={this.showGroupModal} show={this.state.groupShow}>\n            <h2 className=\"modalHeader\">Group Name</h2>\n            </ChatGroup>     \n\n          <SendMessageForm user={this.state.user} group={this.state.group} getMessage={this.getMessage}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}