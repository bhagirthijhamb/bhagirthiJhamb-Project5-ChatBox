{"version":3,"sources":["components/Welcome.js","components/EnterUserModal.js","firebase.js","components/Message.js","components/MessageList.js","components/ChatGroup.js","components/SendMessageForm.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","timeOfDay","hours","Date","getHours","className","Component","backdropStyle","position","top","bottom","left","right","backgroundColor","padding","modalStyle","borderRadius","maxWidth","minHeight","margin","footerStyle","EnterUserModal","sendUser","props","getLoginUser","state","user","onclose","e","onClose","handleChange","setState","target","value","handleSubmit","preventDefault","this","show","style","children","onSubmit","action","onChange","type","placeholder","onClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Message","currentUser","time","message","key","database","ref","currentGroup","child","messageKey","remove","MessageList","messages","map","index","ChatGroupModal","sendGroupName","group","getGroupName","alert","groups","indexOf","push","ServerValue","TIMESTAMP","handleDeleteGroup","handleLiClick","selectedGroup","innerText","on","response","data","val","groupsArray","SendMessageForm","fullMessage","handleUserInput","handleDelete","required","App","showUserModal","userShow","showGroupModal","groupShow","userName","localStorage","setItem","groupName","loadMessages","copyMessage","date","newMessage","getMinutes","getSeconds","scrollToBottom","messageList","document","querySelector","scrollTop","scrollHeight","clientHeight","getItem","ChatGroup","getMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.81386bb1.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Welcome extends Component {\n    render(){\n        const date = new Date();\n        const hours = date.getHours();\n        let timeOfDay\n\n        if (hours < 12) {\n            timeOfDay = \"morning\";\n        } else if (hours >= 12 && hours < 17) {\n            timeOfDay = \"afternoon\";\n        } else {\n            timeOfDay = \"night\";\n        }\n        return(\n            <div>\n                <div className=\"info\">\n                    <h2>Good { timeOfDay } <span className=\"chatBoxEmoji\">üëßüèª</span> <span className=\"chatBoxEmoji\">üë¶üèª</span> </h2>\n                    <p><span className=\"title\">Chat Box</span>  is a chat app that helps you stay connected with your friends in real time</p>\n                    <p>Main features - Click or [tab] to</p>\n                    <ul className=\"infoList\">\n                        <li><span>üëâüèª </span><span className=\"infoButton infoInput\">Input</span> box to type and <span className=\"infoButton\">Send</span> your message</li>\n                        <li><span className=\"infoButton\">X</span> to delete a message</li>\n                        <li><span>üëâüèª </span><span className=\"infoButton\">User</span> button to enter your user name</li>\n                        <li><span>üëâüèª </span><span className=\"infoButton\">Group</span> button to create or change group</li>\n                        <ul>\n                            <li><span className=\"infoButton\">Submit</span> to select or create group</li>\n                            <li><span className=\"infoButton\">Delete</span> to delete a group</li>\n                        </ul>\n                    </ul>\n\n                </div>\n            </div>            \n        )\n    }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\n\n// Grey background\nconst backdropStyle = {\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    padding: 50,\n}\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '30%',\n    left: 0,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    maxWidth: 250,\n    minHeight: 150,\n    margin: '0 auto',\n    padding: 10,\n    position: \"relative\"\n};\n\nconst footerStyle = {\n    position: \"absolute\",\n    bottom: 10\n}\n\n\nclass EnterUserModal extends Component {\n  constructor(){\n    super()\n    this.state = {\n      user: ''\n    }\n  }\n\n  sendUser = () => {\n    this.props.getLoginUser(this.state.user)\n  }\n\n  onclose = (e) => {\n    this.props.onClose && this.props.onClose(e);\n  }; \n\n\n  handleChange = (e) => {\n    // console.log(e.target.value);\n    this.setState({\n      user: e.target.value\n    })\n    \n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.user) {\n      this.sendUser();\n    }\n  }\n\n  \n  render() {\n    // console.log(this.state.user);    \n\n    if (!this.props.show) {\n      return null;\n    }\n    return (\n      <div className=\"loginBox\" style={backdropStyle}>\n        <div style={modalStyle}>\n          <h2 className=\"modalHeader\">Enter username</h2>\n          {this.props.children}\n\n            <form onSubmit={this.handleSubmit} action=\"\">\n                <input className=\"input loginInput\" onChange={this.handleChange} value={this.state.user} type=\"text\" placeholder=\"Username\" />\n                <div style={footerStyle}>\n                  <button className=\"submit\">Submit</button>\n                  <button className=\"close\" onClick={(e) => { this.props.onClose(e); }}>Close</button>\n                </div>\n            </form>          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EnterUserModal;","// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDciUjGJwEk-pas3FAtthvcGXJT8QTwOhQ\",\r\n  authDomain: \"to-do-app-32054.firebaseapp.com\",\r\n  databaseURL: \"https://to-do-app-32054.firebaseio.com\",\r\n  projectId: \"to-do-app-32054\",\r\n  storageBucket: \"to-do-app-32054.appspot.com\",\r\n  messagingSenderId: \"552462434673\",\r\n  appId: \"1:552462434673:web:456137243376262d4576d0\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\n\nimport firebase from './../firebase';\n\nfunction Message(props) {  \n    let remove = messageKey => {\n        const dbRef = firebase.database().ref(`/${props.currentGroup}`);\n        dbRef.child(props.messageKey).remove();\n    }\n\n    let className = 'message'\n    if (props.currentUser === props.user) {\n        className = 'myMessage'\n    }\n\n    return (\n        <div className={className}>\n            <div className=\"message-top\">\n                <div className=\"message-time\">{props.time}</div>\n                <div className=\"message-username\">{props.user}</div>\n            </div>\n           \n            <div className=\"message-text\">{props.message}<span></span></div>\n            <button\n                className=\"delete\"\n                onClick={() => {\n                    remove(props.message.key);\n                }}\n            >\n                <i className=\"fas fa-times deleteIcon\"></i>\n            </button>\n        </div>\n    );    \n}\n\nexport default Message;","import React, { Component } from 'react';\nimport Message from './Message'\n\nclass MessageList extends Component {\n\n    render(props) {\n        // console.log(this.props.currentGroup);\n        return (\n            <div className=\"message-list\">\n               {this.props.messages.map((message, index) => {\n                   return (\n                       <div>\n                            <Message key={index} currentUser={this.props.currentUser} messageKey={message.key} message={message.message} time={message.time} user={message.user} currentGroup={this.props.currentGroup}/>             \n                        </div>\n                   )\n               })}\n            </div>\n        );\n    }\n}\n\nexport default MessageList;","import React, { Component } from 'react';\nimport firebase from 'firebase'\n\n// Grey background\nconst backdropStyle = {\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    padding: 50\n}\n\nconst modalStyle = {\n    position: 'absolute',\n    top: '20%',\n    left: 0,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    maxWidth: 250,\n    minHeight: 150,\n    margin: '0 auto',\n    padding: 10,\n    position: \"relative\"\n};\n\nconst footerStyle = {\n    position: \"absolute\",\n    bottom: 10\n}\n\n\nclass ChatGroupModal extends Component {\n    constructor() {\n        super()\n        this.state = {\n            group: '',\n            groups: [],\n            selectedGroup:''\n        }\n    }\n\n    sendGroupName = () => {\n        if(this.state.group) {\n            this.props.getGroupName(this.state.group)\n        }\n        else {\n            alert('Select a group');\n        }\n    }\n\n    onclose = (e) => {\n        this.props.onClose && this.props.onClose(e);\n    };\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n\n        dbRef.on('value', (response) => {\n            const data = response.val();\n\n            const groupsArray = []\n            for (let key in data) {\n                groupsArray.push(key )\n            }\n\n            this.setState({\n                groups: groupsArray\n            })\n        })\n    }\n\n    handleChange = (e) => {\n        // console.log(e.target.value);\n        this.setState({\n            group: e.target.value\n        })\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(this.state.group) {\n            if (this.state.groups.indexOf(this.state.group) === -1) {\n                const dbRef = firebase.database().ref(`/${this.state.group}`);\n                dbRef.push({\n                    message: 'Welcome to the group !',\n                    time: firebase.database.ServerValue.TIMESTAMP,\n                    user: this.props.currentUser\n                });\n            }\n        }\n    }\n\n    handleDeleteGroup = () => {\n        if(!this.state.group){\n            alert('Select a group');\n        } else {\n            if((this.state.group) && (this.state.group !== this.props.currentGroup)){\n                firebase.database().ref(`${this.state.group}`).remove();\n            } else {\n                alert('Cannot delete the current group');\n            }\n        }        \n    }    \n\n    handleLiClick = (e) => {\n        const selectedGroup = e.target.innerText\n        this.setState({\n           group: `${selectedGroup}`\n        }, () => {\n            // console.log(this.state.selectedGroup);\n        })\n    }\n    \n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n\n        return (\n            <div className=\"loginBox\" style={backdropStyle}>\n                <div style={modalStyle}>\n                    {this.props.children}\n\n                    <div className=\"group-list\">\n                        <ul className=\"groups\">\n                            {this.state.groups.map((group, index) => {\n                                return (                                    \n                                    <li className=\"group\" key=\"index\" onClick={e => this.handleLiClick(e)}>{group}</li>                                    \n                                )\n                            })}\n                        </ul>\n                    </div>\n\n                    <form onSubmit={this.handleSubmit} action=\"\">\n                        <input className=\"input\" onChange={this.handleChange} value={this.state.group} type=\"text\" placeholder=\"Group name\" /> \n                        <div style={footerStyle}>\n                            <button className=\"submit\" onClick={() => this.sendGroupName()}>Submit</button>                            \n                            <button className=\"close\" onClick={(e) => { this.props.onClose(e); }}>Close</button>\n                        </div>\n                    </form>\n\n                    <button className=\"deleteGroup\" onClick={() => {\n                        this.handleDeleteGroup();\n                    }}>Delete</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default ChatGroupModal;\n","import React, { Component } from \"react\";\nimport firebase from 'firebase'\n\nclass SendMessageForm extends Component {\n  constructor(){\n    super();\n    this.state = {\n      message: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const fullMessage = {\n        message: this.state.message,\n        time: firebase.database.ServerValue.TIMESTAMP,\n        user: this.props.user\n      }\n\n    if (this.state.message !== '') {\n\n      const dbRef = firebase\n        .database()\n        .ref(`/${this.props.group}`);\n      dbRef.push(fullMessage);\n\n      this.setState({\n        message: ''\n      })\n    }\n  }\n\n  handleUserInput = (e) => {\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleDelete = (e) => {\n    e.preventDefault();\n  }\n  \n  render() {\n    // console.log(this.state.message);\n    // console.log(this.props.group);\n    return (\n        <form onSubmit={this.handleSubmit} className=\"send-message-form\" action=\"\">\n          <input onChange={this.handleChange} value={this.state.message} type=\"text\" placeholder=\"Type your message and hit ENTER\" required />\n          <button onClick={this.handleSubmit} className=\"send-message\">\n            Send\n          </button>\n        </form>\n    );\n  }\n}\n\nexport default SendMessageForm;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\n// import components\nimport Welcome from './components/Welcome';\nimport EnterUserModal from './components/EnterUserModal';\nimport MessageList from './components/MessageList';\nimport ChatGroup from './components/ChatGroup';\nimport SendMessageForm from \"./components/SendMessageForm\";\n\n// import firebase\nimport firebase from './firebase';\n\n// CSS for the `App` component\nimport \"./App.scss\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userShow: false,\n      groupShow: false,\n      time: \"\",\n      user: `${localStorage.getItem(\"user\") ? localStorage.getItem(\"user\") : 'user'}`,\n      message: \"\",\n      messages: [],\n      group: `${localStorage.getItem(\"group\") ? localStorage.getItem(\"group\") : 'Messages'}`,\n      groups: []\n    };\n  }\n\n  showUserModal = () => {\n    this.setState({\n      // ...this.state,\n      userShow: !this.state.userShow,\n    });\n  };\n\n  showGroupModal = () => {\n    this.setState({\n      // ...this.state,\n      groupShow: !this.state.groupShow,\n    });\n  };\n\n  onclose = (e) => {\n    this.props.onClose && this.props.onClose(e);\n  };\n\n  getLoginUser = (userName) => { \n    this.setState({ \n      user: userName \n    }) \n    localStorage.setItem(\"user\", userName);\n  }  \n\n  getGroupName = (groupName) => {\n    localStorage.setItem(\"group\", groupName);\n    this.setState({\n      group: groupName\n    }, () => { this.loadMessages();})    \n  }\n\n  loadMessages = () => {\n    const dbRef = firebase.database().ref(`/${this.state.group}`);\n\n    dbRef.on('value', (response) => {\n      const data = response.val();\n\n      this.setState({ \n        messages: [] \n      }, () => {\n         \n          const copyMessage = [...this.state.messages];\n          for (let key in data) {\n            const { user, message, time } = data[key];\n            const date = new Date(time);\n            const createdAt = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n            const messageKey = key;\n\n            const newMessage = {\n              time: createdAt,\n              user: user,\n              message: message,\n              key: messageKey\n            }\n\n            copyMessage.push(newMessage);\n\n            this.setState({\n              message: message,\n              messages: copyMessage\n            })\n          }\n      })     \n    })\n  }\n\n  scrollToBottom = () => {\n      const messageList = document.querySelector(\".screen\");\n      messageList.scrollTop = messageList.scrollHeight - messageList.clientHeight;\n  }\n\n  componentDidMount() {\n    this.loadMessages(); \n    // this.scrollToBottom();\n  }       \n\n  componentDidUpdate(){\n    this.scrollToBottom();\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">        \n        <Welcome className=\"information\" />\n        <div className=\"chatBox\">\n          <h1>Chat Box</h1>\n          <div className=\"mobile\">\n            <div className=\"top\"></div>\n            <div className=\"bottom\"></div>\n            <div className=\"topBar\"></div>\n\n            <div className=\"screen\">\n              <MessageList currentUser={this.state.user} messages={this.state.messages} currentGroup={this.state.group} />\n            </div>          \n\n            {/* Buttons on the main page */}\n            <button onClick={this.showUserModal} className=\"create-user\">\n              User\n            </button>\n            <div className=\"current-group\">\n              {this.state.group}\n            </div>\n            <button onClick={this.showGroupModal} className=\"create-group\">\n              Group\n            </button> \n\n            <EnterUserModal getLoginUser={this.getLoginUser} onClose={this.showUserModal} show={this.state.userShow}>\n            </EnterUserModal>  \n\n            <ChatGroup currentUser={this.state.user} currentGroup={this.state.group} getGroupName={this.getGroupName} onClose={this.showGroupModal} show={this.state.groupShow}>\n              <h2 className=\"modalHeader\">Group Name</h2>\n              </ChatGroup>     \n\n            <SendMessageForm user={this.state.user} group={this.state.group} getMessage={this.getMessage}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}